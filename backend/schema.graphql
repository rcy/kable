type Authentication implements Node {
  createdAt: Datetime!
  details: JSON!
  id: UUID!
  identifier: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  service: String!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `Authentication`."""
  user: User
  userId: UUID!
}

"""
A condition to be used against `Authentication` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input AuthenticationCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `details` field."""
  details: JSON

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `identifier` field."""
  identifier: String

  """Checks for equality with the object’s `service` field."""
  service: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

"""A connection to a list of `Authentication` values."""
type AuthenticationsConnection {
  """
  A list of edges which contains the `Authentication` and cursor to aid in pagination.
  """
  edges: [AuthenticationsEdge!]!

  """A list of `Authentication` objects."""
  nodes: [Authentication!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Authentication` you could get from the connection."""
  totalCount: Int!
}

"""A `Authentication` edge in the connection."""
type AuthenticationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Authentication` at the end of the edge."""
  node: Authentication!
}

"""Methods to use when ordering `Authentication`."""
enum AuthenticationsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  DETAILS_ASC
  DETAILS_DESC
  IDENTIFIER_ASC
  IDENTIFIER_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SERVICE_ASC
  SERVICE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""All input for the create `Family` mutation."""
input CreateFamilyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Family` to be created by this mutation."""
  family: FamilyInput!
}

"""All input for the create `FamilyMembership` mutation."""
input CreateFamilyMembershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FamilyMembership` to be created by this mutation."""
  familyMembership: FamilyMembershipInput!
}

"""The output of our create `FamilyMembership` mutation."""
type CreateFamilyMembershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Family` that is related to this `FamilyMembership`."""
  family: Family

  """The `FamilyMembership` that was created by this mutation."""
  familyMembership: FamilyMembership

  """An edge for our `FamilyMembership`. May be used by Relay 1."""
  familyMembershipEdge(
    """The method to use when ordering `FamilyMembership`."""
    orderBy: [FamilyMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FamilyMembershipsEdge

  """Reads a single `Person` that is related to this `FamilyMembership`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our create `Family` mutation."""
type CreateFamilyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Family` that was created by this mutation."""
  family: Family

  """An edge for our `Family`. May be used by Relay 1."""
  familyEdge(
    """The method to use when ordering `Family`."""
    orderBy: [FamiliesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FamiliesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Family`."""
  user: User
}

"""All input for the create `Person` mutation."""
input CreatePersonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Person` to be created by this mutation."""
  person: PersonInput!
}

"""The output of our create `Person` mutation."""
type CreatePersonPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Person` that was created by this mutation."""
  person: Person

  """An edge for our `Person`. May be used by Relay 1."""
  personEdge(
    """The method to use when ordering `Person`."""
    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]
  ): PeopleEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteFamilyMembershipByNodeId` mutation."""
input DeleteFamilyMembershipByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FamilyMembership` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteFamilyMembership` mutation."""
input DeleteFamilyMembershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `FamilyMembership` mutation."""
type DeleteFamilyMembershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFamilyMembershipNodeId: ID

  """Reads a single `Family` that is related to this `FamilyMembership`."""
  family: Family

  """The `FamilyMembership` that was deleted by this mutation."""
  familyMembership: FamilyMembership

  """An edge for our `FamilyMembership`. May be used by Relay 1."""
  familyMembershipEdge(
    """The method to use when ordering `FamilyMembership`."""
    orderBy: [FamilyMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FamilyMembershipsEdge

  """Reads a single `Person` that is related to this `FamilyMembership`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deletePersonByNodeId` mutation."""
input DeletePersonByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Person` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePerson` mutation."""
input DeletePersonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `Person` mutation."""
type DeletePersonPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedPersonNodeId: ID

  """The `Person` that was deleted by this mutation."""
  person: Person

  """An edge for our `Person`. May be used by Relay 1."""
  personEdge(
    """The method to use when ordering `Person`."""
    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]
  ): PeopleEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""A connection to a list of `Family` values."""
type FamiliesConnection {
  """
  A list of edges which contains the `Family` and cursor to aid in pagination.
  """
  edges: [FamiliesEdge!]!

  """A list of `Family` objects."""
  nodes: [Family!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Family` you could get from the connection."""
  totalCount: Int!
}

"""A `Family` edge in the connection."""
type FamiliesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Family` at the end of the edge."""
  node: Family!
}

"""Methods to use when ordering `Family`."""
enum FamiliesOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  USER_ID_ASC
  USER_ID_DESC
}

type Family implements Node {
  createdAt: Datetime!

  """Reads and enables pagination through a set of `FamilyMembership`."""
  familyMemberships(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FamilyMembershipCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FamilyMembership`."""
    orderBy: [FamilyMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FamilyMembershipsConnection!
  id: UUID!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `Family`."""
  user: User
  userId: UUID!
}

"""
A condition to be used against `Family` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FamilyCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

"""An input for mutations affecting `Family`"""
input FamilyInput {
  userId: UUID!
}

type FamilyMembership implements Node {
  """Reads a single `Family` that is related to this `FamilyMembership`."""
  family: Family
  familyId: UUID!
  id: UUID!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Person` that is related to this `FamilyMembership`."""
  person: Person
  personId: UUID!
  role: String!
  title: String
}

"""
A condition to be used against `FamilyMembership` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input FamilyMembershipCondition {
  """Checks for equality with the object’s `familyId` field."""
  familyId: UUID

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `personId` field."""
  personId: UUID

  """Checks for equality with the object’s `role` field."""
  role: String

  """Checks for equality with the object’s `title` field."""
  title: String
}

"""An input for mutations affecting `FamilyMembership`"""
input FamilyMembershipInput {
  familyId: UUID!
  id: UUID
  personId: UUID!
  role: String!
  title: String
}

"""
Represents an update to a `FamilyMembership`. Fields that are set will be updated.
"""
input FamilyMembershipPatch {
  familyId: UUID
  id: UUID
  personId: UUID
  role: String
  title: String
}

"""A connection to a list of `FamilyMembership` values."""
type FamilyMembershipsConnection {
  """
  A list of edges which contains the `FamilyMembership` and cursor to aid in pagination.
  """
  edges: [FamilyMembershipsEdge!]!

  """A list of `FamilyMembership` objects."""
  nodes: [FamilyMembership!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FamilyMembership` you could get from the connection.
  """
  totalCount: Int!
}

"""A `FamilyMembership` edge in the connection."""
type FamilyMembershipsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FamilyMembership` at the end of the edge."""
  node: FamilyMembership!
}

"""Methods to use when ordering `FamilyMembership`."""
enum FamilyMembershipsOrderBy {
  FAMILY_ID_ASC
  FAMILY_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PERSON_ID_ASC
  PERSON_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROLE_ASC
  ROLE_DESC
  TITLE_ASC
  TITLE_DESC
}

type FamilyRole implements Node {
  id: Int!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A condition to be used against `FamilyRole` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FamilyRoleCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""A connection to a list of `FamilyRole` values."""
type FamilyRolesConnection {
  """
  A list of edges which contains the `FamilyRole` and cursor to aid in pagination.
  """
  edges: [FamilyRolesEdge!]!

  """A list of `FamilyRole` objects."""
  nodes: [FamilyRole!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FamilyRole` you could get from the connection."""
  totalCount: Int!
}

"""A `FamilyRole` edge in the connection."""
type FamilyRolesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FamilyRole` at the end of the edge."""
  node: FamilyRole!
}

"""Methods to use when ordering `FamilyRole`."""
enum FamilyRolesOrderBy {
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Family`."""
  createFamily(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFamilyInput!
  ): CreateFamilyPayload

  """Creates a single `FamilyMembership`."""
  createFamilyMembership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFamilyMembershipInput!
  ): CreateFamilyMembershipPayload

  """Creates a single `Person`."""
  createPerson(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePersonInput!
  ): CreatePersonPayload

  """Deletes a single `FamilyMembership` using a unique key."""
  deleteFamilyMembership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFamilyMembershipInput!
  ): DeleteFamilyMembershipPayload

  """Deletes a single `FamilyMembership` using its globally unique id."""
  deleteFamilyMembershipByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFamilyMembershipByNodeIdInput!
  ): DeleteFamilyMembershipPayload

  """Deletes a single `Person` using a unique key."""
  deletePerson(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePersonInput!
  ): DeletePersonPayload

  """Deletes a single `Person` using its globally unique id."""
  deletePersonByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePersonByNodeIdInput!
  ): DeletePersonPayload

  """Updates a single `FamilyMembership` using a unique key and a patch."""
  updateFamilyMembership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFamilyMembershipInput!
  ): UpdateFamilyMembershipPayload

  """
  Updates a single `FamilyMembership` using its globally unique id and a patch.
  """
  updateFamilyMembershipByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFamilyMembershipByNodeIdInput!
  ): UpdateFamilyMembershipPayload

  """Updates a single `Person` using a unique key and a patch."""
  updatePerson(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePersonInput!
  ): UpdatePersonPayload

  """Updates a single `Person` using its globally unique id and a patch."""
  updatePersonByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePersonByNodeIdInput!
  ): UpdatePersonPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByNodeIdInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByPersonId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByPersonIdInput!
  ): UpdateUserPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""A connection to a list of `Person` values."""
type PeopleConnection {
  """
  A list of edges which contains the `Person` and cursor to aid in pagination.
  """
  edges: [PeopleEdge!]!

  """A list of `Person` objects."""
  nodes: [Person!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Person` you could get from the connection."""
  totalCount: Int!
}

"""A `Person` edge in the connection."""
type PeopleEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Person` at the end of the edge."""
  node: Person!
}

"""Methods to use when ordering `Person`."""
enum PeopleOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type Person implements Node {
  createdAt: Datetime!

  """Reads and enables pagination through a set of `FamilyMembership`."""
  familyMemberships(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FamilyMembershipCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FamilyMembership`."""
    orderBy: [FamilyMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FamilyMembershipsConnection!
  id: UUID!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `Person`."""
  user: User
}

"""
A condition to be used against `Person` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PersonCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `Person`"""
input PersonInput {
  createdAt: Datetime
  id: UUID
  name: String!
  updatedAt: Datetime
}

"""
Represents an update to a `Person`. Fields that are set will be updated.
"""
input PersonPatch {
  createdAt: Datetime
  id: UUID
  name: String
  updatedAt: Datetime
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  authentication(id: UUID!): Authentication

  """Reads a single `Authentication` using its globally unique `ID`."""
  authenticationByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Authentication`.
    """
    nodeId: ID!
  ): Authentication
  authenticationByServiceAndIdentifier(identifier: String!, service: String!): Authentication

  """Reads and enables pagination through a set of `Authentication`."""
  authentications(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AuthenticationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Authentication`."""
    orderBy: [AuthenticationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AuthenticationsConnection
  currentUser: User

  """Reads and enables pagination through a set of `Family`."""
  families(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FamilyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Family`."""
    orderBy: [FamiliesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FamiliesConnection
  family(id: UUID!): Family

  """Reads a single `Family` using its globally unique `ID`."""
  familyByNodeId(
    """The globally unique `ID` to be used in selecting a single `Family`."""
    nodeId: ID!
  ): Family
  familyByUserId(userId: UUID!): Family
  familyMembership(id: UUID!): FamilyMembership

  """Reads a single `FamilyMembership` using its globally unique `ID`."""
  familyMembershipByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `FamilyMembership`.
    """
    nodeId: ID!
  ): FamilyMembership

  """Reads and enables pagination through a set of `FamilyMembership`."""
  familyMemberships(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FamilyMembershipCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FamilyMembership`."""
    orderBy: [FamilyMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FamilyMembershipsConnection
  familyRole(id: Int!): FamilyRole
  familyRoleByName(name: String!): FamilyRole

  """Reads a single `FamilyRole` using its globally unique `ID`."""
  familyRoleByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `FamilyRole`.
    """
    nodeId: ID!
  ): FamilyRole

  """Reads and enables pagination through a set of `FamilyRole`."""
  familyRoles(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FamilyRoleCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FamilyRole`."""
    orderBy: [FamilyRolesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FamilyRolesConnection

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of `Person`."""
  people(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Person`."""
    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]
  ): PeopleConnection
  person(id: UUID!): Person

  """Reads a single `Person` using its globally unique `ID`."""
  personByNodeId(
    """The globally unique `ID` to be used in selecting a single `Person`."""
    nodeId: ID!
  ): Person

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
  user(id: UUID!): User

  """Reads a single `User` using its globally unique `ID`."""
  userByNodeId(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User
  userByPersonId(personId: UUID!): User
  userId: UUID

  """Reads and enables pagination through a set of `User`."""
  users(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersConnection
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""All input for the `updateFamilyMembershipByNodeId` mutation."""
input UpdateFamilyMembershipByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FamilyMembership` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `FamilyMembership` being updated.
  """
  patch: FamilyMembershipPatch!
}

"""All input for the `updateFamilyMembership` mutation."""
input UpdateFamilyMembershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `FamilyMembership` being updated.
  """
  patch: FamilyMembershipPatch!
}

"""The output of our update `FamilyMembership` mutation."""
type UpdateFamilyMembershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Family` that is related to this `FamilyMembership`."""
  family: Family

  """The `FamilyMembership` that was updated by this mutation."""
  familyMembership: FamilyMembership

  """An edge for our `FamilyMembership`. May be used by Relay 1."""
  familyMembershipEdge(
    """The method to use when ordering `FamilyMembership`."""
    orderBy: [FamilyMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FamilyMembershipsEdge

  """Reads a single `Person` that is related to this `FamilyMembership`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updatePersonByNodeId` mutation."""
input UpdatePersonByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Person` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Person` being updated.
  """
  patch: PersonPatch!
}

"""All input for the `updatePerson` mutation."""
input UpdatePersonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `Person` being updated.
  """
  patch: PersonPatch!
}

"""The output of our update `Person` mutation."""
type UpdatePersonPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Person` that was updated by this mutation."""
  person: Person

  """An edge for our `Person`. May be used by Relay 1."""
  personEdge(
    """The method to use when ordering `Person`."""
    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]
  ): PeopleEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateUserByNodeId` mutation."""
input UpdateUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""All input for the `updateUserByPersonId` mutation."""
input UpdateUserByPersonIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
  personId: UUID!
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Person` that is related to this `User`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was updated by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

type User implements Node {
  """Reads and enables pagination through a set of `Authentication`."""
  authentications(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AuthenticationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Authentication`."""
    orderBy: [AuthenticationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AuthenticationsConnection!
  avatarUrl: String
  createdAt: Datetime!

  """Reads a single `Family` that is related to this `User`."""
  family: Family
  id: UUID!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Person` that is related to this `User`."""
  person: Person
  personId: UUID
  updatedAt: Datetime!
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `avatarUrl` field."""
  avatarUrl: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `personId` field."""
  personId: UUID

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  avatarUrl: String
  createdAt: Datetime
  id: UUID
  name: String
  personId: UUID
  updatedAt: Datetime
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """A list of `User` objects."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  AVATAR_URL_ASC
  AVATAR_URL_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PERSON_ID_ASC
  PERSON_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}
