type Authentication implements Node {
  createdAt: Datetime!
  details: JSON!
  id: UUID!
  identifier: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  service: String!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `Authentication`."""
  user: User
  userId: UUID!
}

"""
A condition to be used against `Authentication` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input AuthenticationCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `details` field."""
  details: JSON

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `identifier` field."""
  identifier: String

  """Checks for equality with the object’s `service` field."""
  service: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

"""
A filter to be used against `Authentication` object types. All fields are combined with a logical ‘and.’
"""
input AuthenticationFilter {
  """Checks for all expressions in this list."""
  and: [AuthenticationFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `details` field."""
  details: JSONFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `identifier` field."""
  identifier: StringFilter

  """Negates the expression."""
  not: AuthenticationFilter

  """Checks for any expressions in this list."""
  or: [AuthenticationFilter!]

  """Filter by the object’s `service` field."""
  service: StringFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `user` relation."""
  user: UserFilter

  """Filter by the object’s `userId` field."""
  userId: UUIDFilter
}

"""A connection to a list of `Authentication` values."""
type AuthenticationsConnection {
  """
  A list of edges which contains the `Authentication` and cursor to aid in pagination.
  """
  edges: [AuthenticationsEdge!]!

  """A list of `Authentication` objects."""
  nodes: [Authentication!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Authentication` you could get from the connection."""
  totalCount: Int!
}

"""A `Authentication` edge in the connection."""
type AuthenticationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Authentication` at the end of the edge."""
  node: Authentication!
}

"""Methods to use when ordering `Authentication`."""
enum AuthenticationsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  DETAILS_ASC
  DETAILS_DESC
  IDENTIFIER_ASC
  IDENTIFIER_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SERVICE_ASC
  SERVICE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""All input for the create `FamilyMembership` mutation."""
input CreateFamilyMembershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FamilyMembership` to be created by this mutation."""
  familyMembership: FamilyMembershipInput!
}

"""The output of our create `FamilyMembership` mutation."""
type CreateFamilyMembershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Family` that is related to this `FamilyMembership`."""
  family: Family

  """The `FamilyMembership` that was created by this mutation."""
  familyMembership: FamilyMembership

  """An edge for our `FamilyMembership`. May be used by Relay 1."""
  familyMembershipEdge(
    """The method to use when ordering `FamilyMembership`."""
    orderBy: [FamilyMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FamilyMembershipsEdge

  """Reads a single `Person` that is related to this `FamilyMembership`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Interest` mutation."""
input CreateInterestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Interest` to be created by this mutation."""
  interest: InterestInput!
}

"""The output of our create `Interest` mutation."""
type CreateInterestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Interest` that was created by this mutation."""
  interest: Interest

  """An edge for our `Interest`. May be used by Relay 1."""
  interestEdge(
    """The method to use when ordering `Interest`."""
    orderBy: [InterestsOrderBy!] = [PRIMARY_KEY_ASC]
  ): InterestsEdge

  """Reads a single `Person` that is related to this `Interest`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Topic` that is related to this `Interest`."""
  topic: Topic
}

"""All input for the `createLoginCode` mutation."""
input CreateLoginCodeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  username: String!
}

"""The output of our `createLoginCode` mutation."""
type CreateLoginCodePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  loginCodeId: UUID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createLoginToken` mutation."""
input CreateLoginTokenInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  username: String!
}

"""The output of our `createLoginToken` mutation."""
type CreateLoginTokenPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  uuid: UUID
}

"""All input for the create `ManagedPerson` mutation."""
input CreateManagedPersonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ManagedPerson` to be created by this mutation."""
  managedPerson: ManagedPersonInput!
}

"""The output of our create `ManagedPerson` mutation."""
type CreateManagedPersonPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ManagedPerson` that was created by this mutation."""
  managedPerson: ManagedPerson

  """An edge for our `ManagedPerson`. May be used by Relay 1."""
  managedPersonEdge(
    """The method to use when ordering `ManagedPerson`."""
    orderBy: [ManagedPeopleOrderBy!] = [NATURAL]
  ): ManagedPeopleEdge

  """Reads a single `Person` that is related to this `ManagedPerson`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `ManagedPerson`."""
  user: User
}

"""All input for the `createNewFamilyMember` mutation."""
input CreateNewFamilyMemberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
  role: String!
}

"""The output of our `createNewFamilyMember` mutation."""
type CreateNewFamilyMemberPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Family` that is related to this `FamilyMembership`."""
  family: Family
  familyMembership: FamilyMembership

  """An edge for our `FamilyMembership`. May be used by Relay 1."""
  familyMembershipEdge(
    """The method to use when ordering `FamilyMembership`."""
    orderBy: [FamilyMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FamilyMembershipsEdge

  """Reads a single `Person` that is related to this `FamilyMembership`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Person` mutation."""
input CreatePersonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Person` to be created by this mutation."""
  person: PersonInput!
}

"""The output of our create `Person` mutation."""
type CreatePersonPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Person` that was created by this mutation."""
  person: Person

  """An edge for our `Person`. May be used by Relay 1."""
  personEdge(
    """The method to use when ordering `Person`."""
    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]
  ): PeopleEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Space` mutation."""
input CreateSpaceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Space` to be created by this mutation."""
  space: SpaceInput!
}

"""All input for the create `SpaceMembership` mutation."""
input CreateSpaceMembershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SpaceMembership` to be created by this mutation."""
  spaceMembership: SpaceMembershipInput!
}

"""The output of our create `SpaceMembership` mutation."""
type CreateSpaceMembershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Person` that is related to this `SpaceMembership`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Space` that is related to this `SpaceMembership`."""
  space: Space

  """The `SpaceMembership` that was created by this mutation."""
  spaceMembership: SpaceMembership

  """An edge for our `SpaceMembership`. May be used by Relay 1."""
  spaceMembershipEdge(
    """The method to use when ordering `SpaceMembership`."""
    orderBy: [SpaceMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SpaceMembershipsEdge
}

"""The output of our create `Space` mutation."""
type CreateSpacePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Space` that was created by this mutation."""
  space: Space

  """An edge for our `Space`. May be used by Relay 1."""
  spaceEdge(
    """The method to use when ordering `Space`."""
    orderBy: [SpacesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SpacesEdge
}

"""All input for the create `Topic` mutation."""
input CreateTopicInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Topic` to be created by this mutation."""
  topic: TopicInput!
}

"""The output of our create `Topic` mutation."""
type CreateTopicPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Topic` that was created by this mutation."""
  topic: Topic

  """An edge for our `Topic`. May be used by Relay 1."""
  topicEdge(
    """The method to use when ordering `Topic`."""
    orderBy: [TopicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TopicsEdge
}

"""All input for the `createUsernameLoginToken` mutation."""
input CreateUsernameLoginTokenInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  vUsername: String!
}

"""The output of our `createUsernameLoginToken` mutation."""
type CreateUsernameLoginTokenPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  uuid: UUID
}

"""All input for the `currentPersonId` mutation."""
input CurrentPersonIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `currentPersonId` mutation."""
type CurrentPersonIdPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  uuid: UUID
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value."""
  equalTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """Not included in the specified list."""
  notIn: [Datetime!]
}

"""All input for the `deleteFamilyMembershipByNodeId` mutation."""
input DeleteFamilyMembershipByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FamilyMembership` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteFamilyMembershipByPersonId` mutation."""
input DeleteFamilyMembershipByPersonIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  personId: UUID!
}

"""All input for the `deleteFamilyMembership` mutation."""
input DeleteFamilyMembershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `FamilyMembership` mutation."""
type DeleteFamilyMembershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFamilyMembershipNodeId: ID

  """Reads a single `Family` that is related to this `FamilyMembership`."""
  family: Family

  """The `FamilyMembership` that was deleted by this mutation."""
  familyMembership: FamilyMembership

  """An edge for our `FamilyMembership`. May be used by Relay 1."""
  familyMembershipEdge(
    """The method to use when ordering `FamilyMembership`."""
    orderBy: [FamilyMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FamilyMembershipsEdge

  """Reads a single `Person` that is related to this `FamilyMembership`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteInterestByNodeId` mutation."""
input DeleteInterestByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Interest` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteInterest` mutation."""
input DeleteInterestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `Interest` mutation."""
type DeleteInterestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedInterestNodeId: ID

  """The `Interest` that was deleted by this mutation."""
  interest: Interest

  """An edge for our `Interest`. May be used by Relay 1."""
  interestEdge(
    """The method to use when ordering `Interest`."""
    orderBy: [InterestsOrderBy!] = [PRIMARY_KEY_ASC]
  ): InterestsEdge

  """Reads a single `Person` that is related to this `Interest`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Topic` that is related to this `Interest`."""
  topic: Topic
}

"""All input for the `deletePersonByNodeId` mutation."""
input DeletePersonByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Person` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePersonByUsername` mutation."""
input DeletePersonByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  username: String!
}

"""All input for the `deletePerson` mutation."""
input DeletePersonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `Person` mutation."""
type DeletePersonPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedPersonNodeId: ID

  """The `Person` that was deleted by this mutation."""
  person: Person

  """An edge for our `Person`. May be used by Relay 1."""
  personEdge(
    """The method to use when ordering `Person`."""
    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]
  ): PeopleEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteSpaceByNodeId` mutation."""
input DeleteSpaceByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Space` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSpace` mutation."""
input DeleteSpaceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteSpaceMembershipByNodeId` mutation."""
input DeleteSpaceMembershipByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SpaceMembership` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteSpaceMembershipByPersonIdAndSpaceId` mutation.
"""
input DeleteSpaceMembershipByPersonIdAndSpaceIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  personId: UUID!
  spaceId: UUID!
}

"""All input for the `deleteSpaceMembership` mutation."""
input DeleteSpaceMembershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `SpaceMembership` mutation."""
type DeleteSpaceMembershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedSpaceMembershipNodeId: ID

  """Reads a single `Person` that is related to this `SpaceMembership`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Space` that is related to this `SpaceMembership`."""
  space: Space

  """The `SpaceMembership` that was deleted by this mutation."""
  spaceMembership: SpaceMembership

  """An edge for our `SpaceMembership`. May be used by Relay 1."""
  spaceMembershipEdge(
    """The method to use when ordering `SpaceMembership`."""
    orderBy: [SpaceMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SpaceMembershipsEdge
}

"""The output of our delete `Space` mutation."""
type DeleteSpacePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedSpaceNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Space` that was deleted by this mutation."""
  space: Space

  """An edge for our `Space`. May be used by Relay 1."""
  spaceEdge(
    """The method to use when ordering `Space`."""
    orderBy: [SpacesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SpacesEdge
}

"""All input for the `deleteTopicByNodeId` mutation."""
input DeleteTopicByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Topic` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteTopic` mutation."""
input DeleteTopicInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `Topic` mutation."""
type DeleteTopicPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedTopicNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Topic` that was deleted by this mutation."""
  topic: Topic

  """An edge for our `Topic`. May be used by Relay 1."""
  topicEdge(
    """The method to use when ordering `Topic`."""
    orderBy: [TopicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TopicsEdge
}

"""All input for the `exchangeCode` mutation."""
input ExchangeCodeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  code: String!
  loginCodeId: UUID!
}

"""The output of our `exchangeCode` mutation."""
type ExchangeCodePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  sessionKey: UUID
}

"""A connection to a list of `Family` values."""
type FamiliesConnection {
  """
  A list of edges which contains the `Family` and cursor to aid in pagination.
  """
  edges: [FamiliesEdge!]!

  """A list of `Family` objects."""
  nodes: [Family!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Family` you could get from the connection."""
  totalCount: Int!
}

"""A `Family` edge in the connection."""
type FamiliesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Family` at the end of the edge."""
  node: Family!
}

"""Methods to use when ordering `Family`."""
enum FamiliesOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type Family implements Node {
  createdAt: Datetime!

  """Reads and enables pagination through a set of `FamilyMembership`."""
  familyMemberships(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FamilyMembershipCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FamilyMembershipFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FamilyMembership`."""
    orderBy: [FamilyMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FamilyMembershipsConnection!
  id: UUID!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  updatedAt: Datetime!

  """Reads and enables pagination through a set of `User`."""
  users(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersConnection!
}

"""
A condition to be used against `Family` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FamilyCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `Family` object types. All fields are combined with a logical ‘and.’
"""
input FamilyFilter {
  """Checks for all expressions in this list."""
  and: [FamilyFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `familyMemberships` relation."""
  familyMemberships: FamilyToManyFamilyMembershipFilter

  """Some related `familyMemberships` exist."""
  familyMembershipsExist: Boolean

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Negates the expression."""
  not: FamilyFilter

  """Checks for any expressions in this list."""
  or: [FamilyFilter!]

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `users` relation."""
  users: FamilyToManyUserFilter

  """Some related `users` exist."""
  usersExist: Boolean
}

type FamilyMembership implements Node {
  createdAt: Datetime!

  """Reads a single `Family` that is related to this `FamilyMembership`."""
  family: Family
  familyId: UUID!
  id: UUID!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Person` that is related to this `FamilyMembership`."""
  person: Person
  personId: UUID!
  role: String!
  title: String
}

"""
A condition to be used against `FamilyMembership` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input FamilyMembershipCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `familyId` field."""
  familyId: UUID

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `personId` field."""
  personId: UUID

  """Checks for equality with the object’s `role` field."""
  role: String

  """Checks for equality with the object’s `title` field."""
  title: String
}

"""
A filter to be used against `FamilyMembership` object types. All fields are combined with a logical ‘and.’
"""
input FamilyMembershipFilter {
  """Checks for all expressions in this list."""
  and: [FamilyMembershipFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `family` relation."""
  family: FamilyFilter

  """Filter by the object’s `familyId` field."""
  familyId: UUIDFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Negates the expression."""
  not: FamilyMembershipFilter

  """Checks for any expressions in this list."""
  or: [FamilyMembershipFilter!]

  """Filter by the object’s `person` relation."""
  person: PersonFilter

  """Filter by the object’s `personId` field."""
  personId: UUIDFilter

  """Filter by the object’s `role` field."""
  role: StringFilter

  """Filter by the object’s `title` field."""
  title: StringFilter
}

"""An input for mutations affecting `FamilyMembership`"""
input FamilyMembershipInput {
  createdAt: Datetime
  familyId: UUID!
  id: UUID
  personId: UUID!
  role: String!
  title: String
}

"""
Represents an update to a `FamilyMembership`. Fields that are set will be updated.
"""
input FamilyMembershipPatch {
  createdAt: Datetime
  familyId: UUID
  id: UUID
  personId: UUID
  role: String
  title: String
}

"""A connection to a list of `FamilyMembership` values."""
type FamilyMembershipsConnection {
  """
  A list of edges which contains the `FamilyMembership` and cursor to aid in pagination.
  """
  edges: [FamilyMembershipsEdge!]!

  """A list of `FamilyMembership` objects."""
  nodes: [FamilyMembership!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FamilyMembership` you could get from the connection.
  """
  totalCount: Int!
}

"""A `FamilyMembership` edge in the connection."""
type FamilyMembershipsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FamilyMembership` at the end of the edge."""
  node: FamilyMembership!
}

"""Methods to use when ordering `FamilyMembership`."""
enum FamilyMembershipsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  FAMILY_ID_ASC
  FAMILY_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PERSON_ID_ASC
  PERSON_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROLE_ASC
  ROLE_DESC
  TITLE_ASC
  TITLE_DESC
}

type FamilyRole implements Node {
  id: Int!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A condition to be used against `FamilyRole` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FamilyRoleCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""
A filter to be used against `FamilyRole` object types. All fields are combined with a logical ‘and.’
"""
input FamilyRoleFilter {
  """Checks for all expressions in this list."""
  and: [FamilyRoleFilter!]

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: FamilyRoleFilter

  """Checks for any expressions in this list."""
  or: [FamilyRoleFilter!]
}

"""A connection to a list of `FamilyRole` values."""
type FamilyRolesConnection {
  """
  A list of edges which contains the `FamilyRole` and cursor to aid in pagination.
  """
  edges: [FamilyRolesEdge!]!

  """A list of `FamilyRole` objects."""
  nodes: [FamilyRole!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FamilyRole` you could get from the connection."""
  totalCount: Int!
}

"""A `FamilyRole` edge in the connection."""
type FamilyRolesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FamilyRole` at the end of the edge."""
  node: FamilyRole!
}

"""Methods to use when ordering `FamilyRole`."""
enum FamilyRolesOrderBy {
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A filter to be used against many `FamilyMembership` object types. All fields are combined with a logical ‘and.’
"""
input FamilyToManyFamilyMembershipFilter {
  """
  Every related `FamilyMembership` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FamilyMembershipFilter

  """
  No related `FamilyMembership` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FamilyMembershipFilter

  """
  Some related `FamilyMembership` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FamilyMembershipFilter
}

"""
A filter to be used against many `User` object types. All fields are combined with a logical ‘and.’
"""
input FamilyToManyUserFilter {
  """
  Every related `User` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: UserFilter

  """
  No related `User` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: UserFilter

  """
  Some related `User` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: UserFilter
}

"""All input for the `genRandomCode` mutation."""
input GenRandomCodeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  len: Int!
}

"""The output of our `genRandomCode` mutation."""
type GenRandomCodePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  string: String
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value."""
  equalTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int

  """Included in the specified list."""
  in: [Int!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """Not included in the specified list."""
  notIn: [Int!]
}

type Interest implements Node {
  createdAt: Datetime!
  id: UUID!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Person` that is related to this `Interest`."""
  person: Person
  personId: UUID

  """Reads a single `Topic` that is related to this `Interest`."""
  topic: Topic
  topicId: UUID
  updatedAt: Datetime!
}

"""
A condition to be used against `Interest` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input InterestCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `personId` field."""
  personId: UUID

  """Checks for equality with the object’s `topicId` field."""
  topicId: UUID

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `Interest` object types. All fields are combined with a logical ‘and.’
"""
input InterestFilter {
  """Checks for all expressions in this list."""
  and: [InterestFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Negates the expression."""
  not: InterestFilter

  """Checks for any expressions in this list."""
  or: [InterestFilter!]

  """Filter by the object’s `person` relation."""
  person: PersonFilter

  """A related `person` exists."""
  personExists: Boolean

  """Filter by the object’s `personId` field."""
  personId: UUIDFilter

  """Filter by the object’s `topic` relation."""
  topic: TopicFilter

  """A related `topic` exists."""
  topicExists: Boolean

  """Filter by the object’s `topicId` field."""
  topicId: UUIDFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `Interest`"""
input InterestInput {
  createdAt: Datetime
  id: UUID
  personId: UUID
  topicId: UUID
  updatedAt: Datetime
}

"""
Represents an update to a `Interest`. Fields that are set will be updated.
"""
input InterestPatch {
  createdAt: Datetime
  id: UUID
  personId: UUID
  topicId: UUID
  updatedAt: Datetime
}

"""A connection to a list of `Interest` values."""
type InterestsConnection {
  """
  A list of edges which contains the `Interest` and cursor to aid in pagination.
  """
  edges: [InterestsEdge!]!

  """A list of `Interest` objects."""
  nodes: [Interest!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Interest` you could get from the connection."""
  totalCount: Int!
}

"""A `Interest` edge in the connection."""
type InterestsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Interest` at the end of the edge."""
  node: Interest!
}

"""Methods to use when ordering `Interest`."""
enum InterestsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PERSON_ID_ASC
  PERSON_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TOPIC_ID_ASC
  TOPIC_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A filter to be used against JSON fields. All fields are combined with a logical ‘and.’
"""
input JSONFilter {
  """Contained by the specified JSON."""
  containedBy: JSON

  """Contains the specified JSON."""
  contains: JSON

  """Contains all of the specified keys."""
  containsAllKeys: [String!]

  """Contains any of the specified keys."""
  containsAnyKeys: [String!]

  """Contains the specified key."""
  containsKey: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: JSON

  """Equal to the specified value."""
  equalTo: JSON

  """Greater than the specified value."""
  greaterThan: JSON

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: JSON

  """Included in the specified list."""
  in: [JSON!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: JSON

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: JSON

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: JSON

  """Not equal to the specified value."""
  notEqualTo: JSON

  """Not included in the specified list."""
  notIn: [JSON!]
}

type ListenPayload {
  """
  Our root query field type. Allows us to run any query from our subscription payload.
  """
  query: Query
  relatedNode: Node
  relatedNodeId: ID
}

"""A connection to a list of `ManagedPerson` values."""
type ManagedPeopleConnection {
  """
  A list of edges which contains the `ManagedPerson` and cursor to aid in pagination.
  """
  edges: [ManagedPeopleEdge!]!

  """A list of `ManagedPerson` objects."""
  nodes: [ManagedPerson!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ManagedPerson` you could get from the connection."""
  totalCount: Int!
}

"""A `ManagedPerson` edge in the connection."""
type ManagedPeopleEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ManagedPerson` at the end of the edge."""
  node: ManagedPerson!
}

"""Methods to use when ordering `ManagedPerson`."""
enum ManagedPeopleOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PERSON_ID_ASC
  PERSON_ID_DESC
  USER_ID_ASC
  USER_ID_DESC
}

type ManagedPerson {
  createdAt: Datetime!
  id: UUID!

  """Reads a single `Person` that is related to this `ManagedPerson`."""
  person: Person
  personId: UUID!

  """Reads a single `User` that is related to this `ManagedPerson`."""
  user: User
  userId: UUID!
}

"""
A condition to be used against `ManagedPerson` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ManagedPersonCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `personId` field."""
  personId: UUID

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

"""
A filter to be used against `ManagedPerson` object types. All fields are combined with a logical ‘and.’
"""
input ManagedPersonFilter {
  """Checks for all expressions in this list."""
  and: [ManagedPersonFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Negates the expression."""
  not: ManagedPersonFilter

  """Checks for any expressions in this list."""
  or: [ManagedPersonFilter!]

  """Filter by the object’s `person` relation."""
  person: PersonFilter

  """Filter by the object’s `personId` field."""
  personId: UUIDFilter

  """Filter by the object’s `user` relation."""
  user: UserFilter

  """Filter by the object’s `userId` field."""
  userId: UUIDFilter
}

"""An input for mutations affecting `ManagedPerson`"""
input ManagedPersonInput {
  createdAt: Datetime
  id: UUID
  personId: UUID!
  userId: UUID!
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `FamilyMembership`."""
  createFamilyMembership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFamilyMembershipInput!
  ): CreateFamilyMembershipPayload

  """Creates a single `Interest`."""
  createInterest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateInterestInput!
  ): CreateInterestPayload
  createLoginCode(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLoginCodeInput!
  ): CreateLoginCodePayload
  createLoginToken(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLoginTokenInput!
  ): CreateLoginTokenPayload

  """Creates a single `ManagedPerson`."""
  createManagedPerson(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateManagedPersonInput!
  ): CreateManagedPersonPayload
  createNewFamilyMember(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNewFamilyMemberInput!
  ): CreateNewFamilyMemberPayload

  """Creates a single `Person`."""
  createPerson(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePersonInput!
  ): CreatePersonPayload

  """Creates a single `Space`."""
  createSpace(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSpaceInput!
  ): CreateSpacePayload

  """Creates a single `SpaceMembership`."""
  createSpaceMembership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSpaceMembershipInput!
  ): CreateSpaceMembershipPayload

  """Creates a single `Topic`."""
  createTopic(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTopicInput!
  ): CreateTopicPayload
  createUsernameLoginToken(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUsernameLoginTokenInput!
  ): CreateUsernameLoginTokenPayload
  currentPersonId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CurrentPersonIdInput!
  ): CurrentPersonIdPayload

  """Deletes a single `FamilyMembership` using a unique key."""
  deleteFamilyMembership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFamilyMembershipInput!
  ): DeleteFamilyMembershipPayload

  """Deletes a single `FamilyMembership` using its globally unique id."""
  deleteFamilyMembershipByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFamilyMembershipByNodeIdInput!
  ): DeleteFamilyMembershipPayload

  """Deletes a single `FamilyMembership` using a unique key."""
  deleteFamilyMembershipByPersonId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFamilyMembershipByPersonIdInput!
  ): DeleteFamilyMembershipPayload

  """Deletes a single `Interest` using a unique key."""
  deleteInterest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteInterestInput!
  ): DeleteInterestPayload

  """Deletes a single `Interest` using its globally unique id."""
  deleteInterestByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteInterestByNodeIdInput!
  ): DeleteInterestPayload

  """Deletes a single `Person` using a unique key."""
  deletePerson(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePersonInput!
  ): DeletePersonPayload

  """Deletes a single `Person` using its globally unique id."""
  deletePersonByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePersonByNodeIdInput!
  ): DeletePersonPayload

  """Deletes a single `Person` using a unique key."""
  deletePersonByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePersonByUsernameInput!
  ): DeletePersonPayload

  """Deletes a single `Space` using a unique key."""
  deleteSpace(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSpaceInput!
  ): DeleteSpacePayload

  """Deletes a single `Space` using its globally unique id."""
  deleteSpaceByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSpaceByNodeIdInput!
  ): DeleteSpacePayload

  """Deletes a single `SpaceMembership` using a unique key."""
  deleteSpaceMembership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSpaceMembershipInput!
  ): DeleteSpaceMembershipPayload

  """Deletes a single `SpaceMembership` using its globally unique id."""
  deleteSpaceMembershipByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSpaceMembershipByNodeIdInput!
  ): DeleteSpaceMembershipPayload

  """Deletes a single `SpaceMembership` using a unique key."""
  deleteSpaceMembershipByPersonIdAndSpaceId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSpaceMembershipByPersonIdAndSpaceIdInput!
  ): DeleteSpaceMembershipPayload

  """Deletes a single `Topic` using a unique key."""
  deleteTopic(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTopicInput!
  ): DeleteTopicPayload

  """Deletes a single `Topic` using its globally unique id."""
  deleteTopicByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTopicByNodeIdInput!
  ): DeleteTopicPayload
  exchangeCode(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ExchangeCodeInput!
  ): ExchangeCodePayload
  genRandomCode(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: GenRandomCodeInput!
  ): GenRandomCodePayload
  postMessage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: PostMessageInput!
  ): PostMessagePayload

  """Updates a single `FamilyMembership` using a unique key and a patch."""
  updateFamilyMembership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFamilyMembershipInput!
  ): UpdateFamilyMembershipPayload

  """
  Updates a single `FamilyMembership` using its globally unique id and a patch.
  """
  updateFamilyMembershipByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFamilyMembershipByNodeIdInput!
  ): UpdateFamilyMembershipPayload

  """Updates a single `FamilyMembership` using a unique key and a patch."""
  updateFamilyMembershipByPersonId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFamilyMembershipByPersonIdInput!
  ): UpdateFamilyMembershipPayload

  """Updates a single `Interest` using a unique key and a patch."""
  updateInterest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateInterestInput!
  ): UpdateInterestPayload

  """Updates a single `Interest` using its globally unique id and a patch."""
  updateInterestByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateInterestByNodeIdInput!
  ): UpdateInterestPayload

  """Updates a single `Person` using a unique key and a patch."""
  updatePerson(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePersonInput!
  ): UpdatePersonPayload

  """Updates a single `Person` using its globally unique id and a patch."""
  updatePersonByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePersonByNodeIdInput!
  ): UpdatePersonPayload

  """Updates a single `Person` using a unique key and a patch."""
  updatePersonByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePersonByUsernameInput!
  ): UpdatePersonPayload

  """Updates a single `Space` using a unique key and a patch."""
  updateSpace(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSpaceInput!
  ): UpdateSpacePayload

  """Updates a single `Space` using its globally unique id and a patch."""
  updateSpaceByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSpaceByNodeIdInput!
  ): UpdateSpacePayload

  """Updates a single `SpaceMembership` using a unique key and a patch."""
  updateSpaceMembership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSpaceMembershipInput!
  ): UpdateSpaceMembershipPayload

  """
  Updates a single `SpaceMembership` using its globally unique id and a patch.
  """
  updateSpaceMembershipByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSpaceMembershipByNodeIdInput!
  ): UpdateSpaceMembershipPayload

  """Updates a single `SpaceMembership` using a unique key and a patch."""
  updateSpaceMembershipByPersonIdAndSpaceId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSpaceMembershipByPersonIdAndSpaceIdInput!
  ): UpdateSpaceMembershipPayload

  """Updates a single `Topic` using a unique key and a patch."""
  updateTopic(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTopicInput!
  ): UpdateTopicPayload

  """Updates a single `Topic` using its globally unique id and a patch."""
  updateTopicByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTopicByNodeIdInput!
  ): UpdateTopicPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByNodeIdInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByPersonId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByPersonIdInput!
  ): UpdateUserPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type Notification {
  createdAt: Datetime!
  id: UUID!

  """
  Reads a single `SpaceMembership` that is related to this `Notification`.
  """
  membership: SpaceMembership
  membershipId: UUID!

  """Reads a single `Post` that is related to this `Notification`."""
  post: Post
  postId: UUID!
}

"""
A condition to be used against `Notification` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input NotificationCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `membershipId` field."""
  membershipId: UUID

  """Checks for equality with the object’s `postId` field."""
  postId: UUID
}

"""
A filter to be used against `Notification` object types. All fields are combined with a logical ‘and.’
"""
input NotificationFilter {
  """Checks for all expressions in this list."""
  and: [NotificationFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `membership` relation."""
  membership: SpaceMembershipFilter

  """Filter by the object’s `membershipId` field."""
  membershipId: UUIDFilter

  """Negates the expression."""
  not: NotificationFilter

  """Checks for any expressions in this list."""
  or: [NotificationFilter!]

  """Filter by the object’s `post` relation."""
  post: PostFilter

  """Filter by the object’s `postId` field."""
  postId: UUIDFilter
}

"""A connection to a list of `Notification` values."""
type NotificationsConnection {
  """
  A list of edges which contains the `Notification` and cursor to aid in pagination.
  """
  edges: [NotificationsEdge!]!

  """A list of `Notification` objects."""
  nodes: [Notification!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Notification` you could get from the connection."""
  totalCount: Int!
}

"""A `Notification` edge in the connection."""
type NotificationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Notification` at the end of the edge."""
  node: Notification!
}

"""Methods to use when ordering `Notification`."""
enum NotificationsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  MEMBERSHIP_ID_ASC
  MEMBERSHIP_ID_DESC
  NATURAL
  POST_ID_ASC
  POST_ID_DESC
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""A connection to a list of `Person` values."""
type PeopleConnection {
  """
  A list of edges which contains the `Person` and cursor to aid in pagination.
  """
  edges: [PeopleEdge!]!

  """A list of `Person` objects."""
  nodes: [Person!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Person` you could get from the connection."""
  totalCount: Int!
}

"""A `Person` edge in the connection."""
type PeopleEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Person` at the end of the edge."""
  node: Person!
}

"""Methods to use when ordering `Person`."""
enum PeopleOrderBy {
  AVATAR_URL_ASC
  AVATAR_URL_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  USERNAME_ASC
  USERNAME_DESC
}

type Person implements Node {
  avatarUrl: String!
  createdAt: Datetime!

  """Reads a single `FamilyMembership` that is related to this `Person`."""
  familyMembership: FamilyMembership
  id: UUID!

  """Reads and enables pagination through a set of `Interest`."""
  interests(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InterestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: InterestFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Interest`."""
    orderBy: [InterestsOrderBy!] = [PRIMARY_KEY_ASC]
  ): InterestsConnection!

  """Reads and enables pagination through a set of `ManagedPerson`."""
  managedPeople(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ManagedPersonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ManagedPersonFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ManagedPerson`."""
    orderBy: [ManagedPeopleOrderBy!] = [NATURAL]
  ): ManagedPeopleConnection!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of `SpaceMembership`."""
  spaceMemberships(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SpaceMembershipCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SpaceMembershipFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SpaceMembership`."""
    orderBy: [SpaceMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SpaceMembershipsConnection!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `Person`."""
  user: User
  username: String
}

"""
A condition to be used against `Person` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PersonCondition {
  """Checks for equality with the object’s `avatarUrl` field."""
  avatarUrl: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `username` field."""
  username: String
}

"""
A filter to be used against `Person` object types. All fields are combined with a logical ‘and.’
"""
input PersonFilter {
  """Checks for all expressions in this list."""
  and: [PersonFilter!]

  """Filter by the object’s `avatarUrl` field."""
  avatarUrl: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `familyMembership` relation."""
  familyMembership: FamilyMembershipFilter

  """A related `familyMembership` exists."""
  familyMembershipExists: Boolean

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `interests` relation."""
  interests: PersonToManyInterestFilter

  """Some related `interests` exist."""
  interestsExist: Boolean

  """Filter by the object’s `managedPeople` relation."""
  managedPeople: PersonToManyManagedPersonFilter

  """Some related `managedPeople` exist."""
  managedPeopleExist: Boolean

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: PersonFilter

  """Checks for any expressions in this list."""
  or: [PersonFilter!]

  """Filter by the object’s `spaceMemberships` relation."""
  spaceMemberships: PersonToManySpaceMembershipFilter

  """Some related `spaceMemberships` exist."""
  spaceMembershipsExist: Boolean

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `user` relation."""
  user: UserFilter

  """A related `user` exists."""
  userExists: Boolean

  """Filter by the object’s `username` field."""
  username: StringFilter
}

"""An input for mutations affecting `Person`"""
input PersonInput {
  avatarUrl: String
  createdAt: Datetime
  id: UUID
  name: String!
  updatedAt: Datetime
  username: String
}

"""
Represents an update to a `Person`. Fields that are set will be updated.
"""
input PersonPatch {
  avatarUrl: String
  createdAt: Datetime
  id: UUID
  name: String
  updatedAt: Datetime
  username: String
}

"""
A filter to be used against many `Interest` object types. All fields are combined with a logical ‘and.’
"""
input PersonToManyInterestFilter {
  """
  Every related `Interest` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: InterestFilter

  """
  No related `Interest` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: InterestFilter

  """
  Some related `Interest` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: InterestFilter
}

"""
A filter to be used against many `ManagedPerson` object types. All fields are combined with a logical ‘and.’
"""
input PersonToManyManagedPersonFilter {
  """
  Every related `ManagedPerson` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ManagedPersonFilter

  """
  No related `ManagedPerson` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ManagedPersonFilter

  """
  Some related `ManagedPerson` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ManagedPersonFilter
}

"""
A filter to be used against many `SpaceMembership` object types. All fields are combined with a logical ‘and.’
"""
input PersonToManySpaceMembershipFilter {
  """
  Every related `SpaceMembership` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SpaceMembershipFilter

  """
  No related `SpaceMembership` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SpaceMembershipFilter

  """
  Some related `SpaceMembership` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SpaceMembershipFilter
}

type Post implements Node {
  body: String!
  createdAt: Datetime!
  id: UUID!

  """Reads a single `SpaceMembership` that is related to this `Post`."""
  membership: SpaceMembership
  membershipId: UUID!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of `Notification`."""
  notifications(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [NATURAL]
  ): NotificationsConnection!

  """Reads a single `Space` that is related to this `Post`."""
  space: Space
  spaceId: UUID!
  updatedAt: Datetime!
}

"""
A condition to be used against `Post` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PostCondition {
  """Checks for equality with the object’s `body` field."""
  body: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `membershipId` field."""
  membershipId: UUID

  """Checks for equality with the object’s `spaceId` field."""
  spaceId: UUID

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `Post` object types. All fields are combined with a logical ‘and.’
"""
input PostFilter {
  """Checks for all expressions in this list."""
  and: [PostFilter!]

  """Filter by the object’s `body` field."""
  body: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `membership` relation."""
  membership: SpaceMembershipFilter

  """Filter by the object’s `membershipId` field."""
  membershipId: UUIDFilter

  """Negates the expression."""
  not: PostFilter

  """Filter by the object’s `notifications` relation."""
  notifications: PostToManyNotificationFilter

  """Some related `notifications` exist."""
  notificationsExist: Boolean

  """Checks for any expressions in this list."""
  or: [PostFilter!]

  """Filter by the object’s `space` relation."""
  space: SpaceFilter

  """Filter by the object’s `spaceId` field."""
  spaceId: UUIDFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""All input for the `postMessage` mutation."""
input PostMessageInput {
  body: String!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  spaceMembershipId: UUID!
}

"""The output of our `postMessage` mutation."""
type PostMessagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `SpaceMembership` that is related to this `Post`."""
  membership: SpaceMembership
  post: Post

  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Space` that is related to this `Post`."""
  space: Space
}

type PostSubscriptionPayload {
  event: String
  post: Post
}

"""
A filter to be used against many `Notification` object types. All fields are combined with a logical ‘and.’
"""
input PostToManyNotificationFilter {
  """
  Every related `Notification` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: NotificationFilter

  """
  No related `Notification` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: NotificationFilter

  """
  Some related `Notification` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: NotificationFilter
}

"""A connection to a list of `Post` values."""
type PostsConnection {
  """
  A list of edges which contains the `Post` and cursor to aid in pagination.
  """
  edges: [PostsEdge!]!

  """A list of `Post` objects."""
  nodes: [Post!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Post` you could get from the connection."""
  totalCount: Int!
}

"""A `Post` edge in the connection."""
type PostsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Post` at the end of the edge."""
  node: Post!
}

"""Methods to use when ordering `Post`."""
enum PostsOrderBy {
  BODY_ASC
  BODY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  MEMBERSHIP_ID_ASC
  MEMBERSHIP_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SPACE_ID_ASC
  SPACE_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  authentication(id: UUID!): Authentication

  """Reads a single `Authentication` using its globally unique `ID`."""
  authenticationByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Authentication`.
    """
    nodeId: ID!
  ): Authentication
  authenticationByServiceAndIdentifier(identifier: String!, service: String!): Authentication

  """Reads and enables pagination through a set of `Authentication`."""
  authentications(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AuthenticationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AuthenticationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Authentication`."""
    orderBy: [AuthenticationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AuthenticationsConnection
  currentFamilyMembership: FamilyMembership
  currentFamilyMembershipId: UUID
  currentPerson: Person
  currentUser: User

  """Reads and enables pagination through a set of `Family`."""
  families(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FamilyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FamilyFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Family`."""
    orderBy: [FamiliesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FamiliesConnection
  family(id: UUID!): Family

  """Reads a single `Family` using its globally unique `ID`."""
  familyByNodeId(
    """The globally unique `ID` to be used in selecting a single `Family`."""
    nodeId: ID!
  ): Family
  familyMembership(id: UUID!): FamilyMembership

  """Reads a single `FamilyMembership` using its globally unique `ID`."""
  familyMembershipByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `FamilyMembership`.
    """
    nodeId: ID!
  ): FamilyMembership
  familyMembershipByPersonId(personId: UUID!): FamilyMembership

  """Reads and enables pagination through a set of `FamilyMembership`."""
  familyMemberships(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FamilyMembershipCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FamilyMembershipFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FamilyMembership`."""
    orderBy: [FamilyMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FamilyMembershipsConnection
  familyRole(id: Int!): FamilyRole
  familyRoleByName(name: String!): FamilyRole

  """Reads a single `FamilyRole` using its globally unique `ID`."""
  familyRoleByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `FamilyRole`.
    """
    nodeId: ID!
  ): FamilyRole

  """Reads and enables pagination through a set of `FamilyRole`."""
  familyRoles(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FamilyRoleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FamilyRoleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FamilyRole`."""
    orderBy: [FamilyRolesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FamilyRolesConnection
  interest(id: UUID!): Interest

  """Reads a single `Interest` using its globally unique `ID`."""
  interestByNodeId(
    """The globally unique `ID` to be used in selecting a single `Interest`."""
    nodeId: ID!
  ): Interest

  """Reads and enables pagination through a set of `Interest`."""
  interests(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InterestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: InterestFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Interest`."""
    orderBy: [InterestsOrderBy!] = [PRIMARY_KEY_ASC]
  ): InterestsConnection

  """Reads and enables pagination through a set of `ManagedPerson`."""
  managedPeople(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ManagedPersonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ManagedPersonFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ManagedPerson`."""
    orderBy: [ManagedPeopleOrderBy!] = [NATURAL]
  ): ManagedPeopleConnection

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of `Notification`."""
  notifications(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [NATURAL]
  ): NotificationsConnection

  """Reads and enables pagination through a set of `Person`."""
  people(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PersonFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Person`."""
    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]
  ): PeopleConnection
  person(id: UUID!): Person

  """Reads a single `Person` using its globally unique `ID`."""
  personByNodeId(
    """The globally unique `ID` to be used in selecting a single `Person`."""
    nodeId: ID!
  ): Person
  personByUsername(username: String!): Person
  post(id: UUID!): Post

  """Reads a single `Post` using its globally unique `ID`."""
  postByNodeId(
    """The globally unique `ID` to be used in selecting a single `Post`."""
    nodeId: ID!
  ): Post

  """Reads and enables pagination through a set of `Post`."""
  posts(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsConnection

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
  space(id: UUID!): Space

  """Reads a single `Space` using its globally unique `ID`."""
  spaceByNodeId(
    """The globally unique `ID` to be used in selecting a single `Space`."""
    nodeId: ID!
  ): Space
  spaceMembership(id: UUID!): SpaceMembership

  """Reads a single `SpaceMembership` using its globally unique `ID`."""
  spaceMembershipByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `SpaceMembership`.
    """
    nodeId: ID!
  ): SpaceMembership
  spaceMembershipByPersonIdAndSpaceId(personId: UUID!, spaceId: UUID!): SpaceMembership

  """Reads and enables pagination through a set of `SpaceMembership`."""
  spaceMemberships(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SpaceMembershipCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SpaceMembershipFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SpaceMembership`."""
    orderBy: [SpaceMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SpaceMembershipsConnection

  """Reads and enables pagination through a set of `Space`."""
  spaces(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SpaceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SpaceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Space`."""
    orderBy: [SpacesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SpacesConnection
  topic(id: UUID!): Topic

  """Reads a single `Topic` using its globally unique `ID`."""
  topicByNodeId(
    """The globally unique `ID` to be used in selecting a single `Topic`."""
    nodeId: ID!
  ): Topic

  """Reads and enables pagination through a set of `Topic`."""
  topics(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TopicCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TopicFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Topic`."""
    orderBy: [TopicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TopicsConnection
  user(id: UUID!): User

  """Reads a single `User` using its globally unique `ID`."""
  userByNodeId(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User
  userByPersonId(personId: UUID!): User
  userId: UUID

  """Reads and enables pagination through a set of `User`."""
  users(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersConnection
}

type Space implements Node {
  createdAt: Datetime!
  description: String
  id: UUID!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of `Post`."""
  posts(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsConnection!

  """Reads and enables pagination through a set of `SpaceMembership`."""
  spaceMemberships(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SpaceMembershipCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SpaceMembershipFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SpaceMembership`."""
    orderBy: [SpaceMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SpaceMembershipsConnection!
  updatedAt: Datetime!
}

"""
A condition to be used against `Space` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input SpaceCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `Space` object types. All fields are combined with a logical ‘and.’
"""
input SpaceFilter {
  """Checks for all expressions in this list."""
  and: [SpaceFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: SpaceFilter

  """Checks for any expressions in this list."""
  or: [SpaceFilter!]

  """Filter by the object’s `posts` relation."""
  posts: SpaceToManyPostFilter

  """Some related `posts` exist."""
  postsExist: Boolean

  """Filter by the object’s `spaceMemberships` relation."""
  spaceMemberships: SpaceToManySpaceMembershipFilter

  """Some related `spaceMemberships` exist."""
  spaceMembershipsExist: Boolean

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `Space`"""
input SpaceInput {
  createdAt: Datetime
  description: String
  id: UUID
  name: String!
  updatedAt: Datetime
}

type SpaceMembership implements Node {
  createdAt: Datetime!
  id: UUID!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of `Notification`."""
  notificationsByMembershipId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [NATURAL]
  ): NotificationsConnection!

  """Reads a single `Person` that is related to this `SpaceMembership`."""
  person: Person
  personId: UUID!

  """Reads and enables pagination through a set of `Post`."""
  postsByMembershipId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsConnection!
  roleId: String!

  """Reads a single `Space` that is related to this `SpaceMembership`."""
  space: Space
  spaceId: UUID!
  updatedAt: Datetime!
}

"""
A condition to be used against `SpaceMembership` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SpaceMembershipCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `personId` field."""
  personId: UUID

  """Checks for equality with the object’s `roleId` field."""
  roleId: String

  """Checks for equality with the object’s `spaceId` field."""
  spaceId: UUID

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `SpaceMembership` object types. All fields are combined with a logical ‘and.’
"""
input SpaceMembershipFilter {
  """Checks for all expressions in this list."""
  and: [SpaceMembershipFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Negates the expression."""
  not: SpaceMembershipFilter

  """Filter by the object’s `notificationsByMembershipId` relation."""
  notificationsByMembershipId: SpaceMembershipToManyNotificationFilter

  """Some related `notificationsByMembershipId` exist."""
  notificationsByMembershipIdExist: Boolean

  """Checks for any expressions in this list."""
  or: [SpaceMembershipFilter!]

  """Filter by the object’s `person` relation."""
  person: PersonFilter

  """Filter by the object’s `personId` field."""
  personId: UUIDFilter

  """Filter by the object’s `postsByMembershipId` relation."""
  postsByMembershipId: SpaceMembershipToManyPostFilter

  """Some related `postsByMembershipId` exist."""
  postsByMembershipIdExist: Boolean

  """Filter by the object’s `roleId` field."""
  roleId: StringFilter

  """Filter by the object’s `space` relation."""
  space: SpaceFilter

  """Filter by the object’s `spaceId` field."""
  spaceId: UUIDFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `SpaceMembership`"""
input SpaceMembershipInput {
  createdAt: Datetime
  id: UUID
  personId: UUID!
  roleId: String!
  spaceId: UUID!
  updatedAt: Datetime
}

"""
Represents an update to a `SpaceMembership`. Fields that are set will be updated.
"""
input SpaceMembershipPatch {
  createdAt: Datetime
  id: UUID
  personId: UUID
  roleId: String
  spaceId: UUID
  updatedAt: Datetime
}

"""
A filter to be used against many `Notification` object types. All fields are combined with a logical ‘and.’
"""
input SpaceMembershipToManyNotificationFilter {
  """
  Every related `Notification` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: NotificationFilter

  """
  No related `Notification` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: NotificationFilter

  """
  Some related `Notification` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: NotificationFilter
}

"""
A filter to be used against many `Post` object types. All fields are combined with a logical ‘and.’
"""
input SpaceMembershipToManyPostFilter {
  """
  Every related `Post` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PostFilter

  """
  No related `Post` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PostFilter

  """
  Some related `Post` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PostFilter
}

"""A connection to a list of `SpaceMembership` values."""
type SpaceMembershipsConnection {
  """
  A list of edges which contains the `SpaceMembership` and cursor to aid in pagination.
  """
  edges: [SpaceMembershipsEdge!]!

  """A list of `SpaceMembership` objects."""
  nodes: [SpaceMembership!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SpaceMembership` you could get from the connection.
  """
  totalCount: Int!
}

"""A `SpaceMembership` edge in the connection."""
type SpaceMembershipsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SpaceMembership` at the end of the edge."""
  node: SpaceMembership!
}

"""Methods to use when ordering `SpaceMembership`."""
enum SpaceMembershipsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PERSON_ID_ASC
  PERSON_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROLE_ID_ASC
  ROLE_ID_DESC
  SPACE_ID_ASC
  SPACE_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
Represents an update to a `Space`. Fields that are set will be updated.
"""
input SpacePatch {
  createdAt: Datetime
  description: String
  id: UUID
  name: String
  updatedAt: Datetime
}

"""
A filter to be used against many `Post` object types. All fields are combined with a logical ‘and.’
"""
input SpaceToManyPostFilter {
  """
  Every related `Post` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PostFilter

  """
  No related `Post` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PostFilter

  """
  Some related `Post` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PostFilter
}

"""
A filter to be used against many `SpaceMembership` object types. All fields are combined with a logical ‘and.’
"""
input SpaceToManySpaceMembershipFilter {
  """
  Every related `SpaceMembership` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SpaceMembershipFilter

  """
  No related `SpaceMembership` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SpaceMembershipFilter

  """
  Some related `SpaceMembership` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SpaceMembershipFilter
}

"""A connection to a list of `Space` values."""
type SpacesConnection {
  """
  A list of edges which contains the `Space` and cursor to aid in pagination.
  """
  edges: [SpacesEdge!]!

  """A list of `Space` objects."""
  nodes: [Space!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Space` you could get from the connection."""
  totalCount: Int!
}

"""A `Space` edge in the connection."""
type SpacesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Space` at the end of the edge."""
  node: Space!
}

"""Methods to use when ordering `Space`."""
enum SpacesOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Equal to the specified value."""
  equalTo: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String

  """Included in the specified list."""
  in: [String!]

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: String

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """Not equal to the specified value."""
  notEqualTo: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """Not included in the specified list."""
  notIn: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String
}

"""
The root subscription type: contains realtime events you can subscribe to with the `subscription` operation.
"""
type Subscription {
  listen(topic: String!): ListenPayload!
  posts(spaceId: UUID!): PostSubscriptionPayload
}

type Topic implements Node {
  createdAt: Datetime!
  id: UUID!

  """Reads and enables pagination through a set of `Interest`."""
  interests(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InterestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: InterestFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Interest`."""
    orderBy: [InterestsOrderBy!] = [PRIMARY_KEY_ASC]
  ): InterestsConnection!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  updatedAt: Datetime!
}

"""
A condition to be used against `Topic` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TopicCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `Topic` object types. All fields are combined with a logical ‘and.’
"""
input TopicFilter {
  """Checks for all expressions in this list."""
  and: [TopicFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `interests` relation."""
  interests: TopicToManyInterestFilter

  """Some related `interests` exist."""
  interestsExist: Boolean

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: TopicFilter

  """Checks for any expressions in this list."""
  or: [TopicFilter!]

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `Topic`"""
input TopicInput {
  createdAt: Datetime
  id: UUID
  name: String!
  updatedAt: Datetime
}

"""
Represents an update to a `Topic`. Fields that are set will be updated.
"""
input TopicPatch {
  createdAt: Datetime
  id: UUID
  name: String
  updatedAt: Datetime
}

"""
A filter to be used against many `Interest` object types. All fields are combined with a logical ‘and.’
"""
input TopicToManyInterestFilter {
  """
  Every related `Interest` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: InterestFilter

  """
  No related `Interest` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: InterestFilter

  """
  Some related `Interest` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: InterestFilter
}

"""A connection to a list of `Topic` values."""
type TopicsConnection {
  """
  A list of edges which contains the `Topic` and cursor to aid in pagination.
  """
  edges: [TopicsEdge!]!

  """A list of `Topic` objects."""
  nodes: [Topic!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Topic` you could get from the connection."""
  totalCount: Int!
}

"""A `Topic` edge in the connection."""
type TopicsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Topic` at the end of the edge."""
  node: Topic!
}

"""Methods to use when ordering `Topic`."""
enum TopicsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""
A filter to be used against UUID fields. All fields are combined with a logical ‘and.’
"""
input UUIDFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UUID

  """Equal to the specified value."""
  equalTo: UUID

  """Greater than the specified value."""
  greaterThan: UUID

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UUID

  """Included in the specified list."""
  in: [UUID!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: UUID

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UUID

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: UUID

  """Not equal to the specified value."""
  notEqualTo: UUID

  """Not included in the specified list."""
  notIn: [UUID!]
}

"""All input for the `updateFamilyMembershipByNodeId` mutation."""
input UpdateFamilyMembershipByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FamilyMembership` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `FamilyMembership` being updated.
  """
  patch: FamilyMembershipPatch!
}

"""All input for the `updateFamilyMembershipByPersonId` mutation."""
input UpdateFamilyMembershipByPersonIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FamilyMembership` being updated.
  """
  patch: FamilyMembershipPatch!
  personId: UUID!
}

"""All input for the `updateFamilyMembership` mutation."""
input UpdateFamilyMembershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `FamilyMembership` being updated.
  """
  patch: FamilyMembershipPatch!
}

"""The output of our update `FamilyMembership` mutation."""
type UpdateFamilyMembershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Family` that is related to this `FamilyMembership`."""
  family: Family

  """The `FamilyMembership` that was updated by this mutation."""
  familyMembership: FamilyMembership

  """An edge for our `FamilyMembership`. May be used by Relay 1."""
  familyMembershipEdge(
    """The method to use when ordering `FamilyMembership`."""
    orderBy: [FamilyMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FamilyMembershipsEdge

  """Reads a single `Person` that is related to this `FamilyMembership`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateInterestByNodeId` mutation."""
input UpdateInterestByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Interest` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Interest` being updated.
  """
  patch: InterestPatch!
}

"""All input for the `updateInterest` mutation."""
input UpdateInterestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `Interest` being updated.
  """
  patch: InterestPatch!
}

"""The output of our update `Interest` mutation."""
type UpdateInterestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Interest` that was updated by this mutation."""
  interest: Interest

  """An edge for our `Interest`. May be used by Relay 1."""
  interestEdge(
    """The method to use when ordering `Interest`."""
    orderBy: [InterestsOrderBy!] = [PRIMARY_KEY_ASC]
  ): InterestsEdge

  """Reads a single `Person` that is related to this `Interest`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Topic` that is related to this `Interest`."""
  topic: Topic
}

"""All input for the `updatePersonByNodeId` mutation."""
input UpdatePersonByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Person` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Person` being updated.
  """
  patch: PersonPatch!
}

"""All input for the `updatePersonByUsername` mutation."""
input UpdatePersonByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Person` being updated.
  """
  patch: PersonPatch!
  username: String!
}

"""All input for the `updatePerson` mutation."""
input UpdatePersonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `Person` being updated.
  """
  patch: PersonPatch!
}

"""The output of our update `Person` mutation."""
type UpdatePersonPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Person` that was updated by this mutation."""
  person: Person

  """An edge for our `Person`. May be used by Relay 1."""
  personEdge(
    """The method to use when ordering `Person`."""
    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]
  ): PeopleEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateSpaceByNodeId` mutation."""
input UpdateSpaceByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Space` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Space` being updated.
  """
  patch: SpacePatch!
}

"""All input for the `updateSpace` mutation."""
input UpdateSpaceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `Space` being updated.
  """
  patch: SpacePatch!
}

"""All input for the `updateSpaceMembershipByNodeId` mutation."""
input UpdateSpaceMembershipByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SpaceMembership` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SpaceMembership` being updated.
  """
  patch: SpaceMembershipPatch!
}

"""
All input for the `updateSpaceMembershipByPersonIdAndSpaceId` mutation.
"""
input UpdateSpaceMembershipByPersonIdAndSpaceIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SpaceMembership` being updated.
  """
  patch: SpaceMembershipPatch!
  personId: UUID!
  spaceId: UUID!
}

"""All input for the `updateSpaceMembership` mutation."""
input UpdateSpaceMembershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `SpaceMembership` being updated.
  """
  patch: SpaceMembershipPatch!
}

"""The output of our update `SpaceMembership` mutation."""
type UpdateSpaceMembershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Person` that is related to this `SpaceMembership`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Space` that is related to this `SpaceMembership`."""
  space: Space

  """The `SpaceMembership` that was updated by this mutation."""
  spaceMembership: SpaceMembership

  """An edge for our `SpaceMembership`. May be used by Relay 1."""
  spaceMembershipEdge(
    """The method to use when ordering `SpaceMembership`."""
    orderBy: [SpaceMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SpaceMembershipsEdge
}

"""The output of our update `Space` mutation."""
type UpdateSpacePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Space` that was updated by this mutation."""
  space: Space

  """An edge for our `Space`. May be used by Relay 1."""
  spaceEdge(
    """The method to use when ordering `Space`."""
    orderBy: [SpacesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SpacesEdge
}

"""All input for the `updateTopicByNodeId` mutation."""
input UpdateTopicByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Topic` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Topic` being updated.
  """
  patch: TopicPatch!
}

"""All input for the `updateTopic` mutation."""
input UpdateTopicInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `Topic` being updated.
  """
  patch: TopicPatch!
}

"""The output of our update `Topic` mutation."""
type UpdateTopicPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Topic` that was updated by this mutation."""
  topic: Topic

  """An edge for our `Topic`. May be used by Relay 1."""
  topicEdge(
    """The method to use when ordering `Topic`."""
    orderBy: [TopicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TopicsEdge
}

"""All input for the `updateUserByNodeId` mutation."""
input UpdateUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""All input for the `updateUserByPersonId` mutation."""
input UpdateUserByPersonIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
  personId: UUID!
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Family` that is related to this `User`."""
  family: Family

  """Reads a single `Person` that is related to this `User`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was updated by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

type User implements Node {
  """Reads and enables pagination through a set of `Authentication`."""
  authentications(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AuthenticationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AuthenticationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Authentication`."""
    orderBy: [AuthenticationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AuthenticationsConnection!
  avatarUrl: String
  createdAt: Datetime!

  """Reads a single `Family` that is related to this `User`."""
  family: Family
  familyId: UUID
  id: UUID!

  """Reads and enables pagination through a set of `ManagedPerson`."""
  managedPeople(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ManagedPersonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ManagedPersonFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ManagedPerson`."""
    orderBy: [ManagedPeopleOrderBy!] = [NATURAL]
  ): ManagedPeopleConnection!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Person` that is related to this `User`."""
  person: Person
  personId: UUID
  updatedAt: Datetime!
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `avatarUrl` field."""
  avatarUrl: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `familyId` field."""
  familyId: UUID

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `personId` field."""
  personId: UUID

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `User` object types. All fields are combined with a logical ‘and.’
"""
input UserFilter {
  """Checks for all expressions in this list."""
  and: [UserFilter!]

  """Filter by the object’s `authentications` relation."""
  authentications: UserToManyAuthenticationFilter

  """Some related `authentications` exist."""
  authenticationsExist: Boolean

  """Filter by the object’s `avatarUrl` field."""
  avatarUrl: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `family` relation."""
  family: FamilyFilter

  """A related `family` exists."""
  familyExists: Boolean

  """Filter by the object’s `familyId` field."""
  familyId: UUIDFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `managedPeople` relation."""
  managedPeople: UserToManyManagedPersonFilter

  """Some related `managedPeople` exist."""
  managedPeopleExist: Boolean

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: UserFilter

  """Checks for any expressions in this list."""
  or: [UserFilter!]

  """Filter by the object’s `person` relation."""
  person: PersonFilter

  """A related `person` exists."""
  personExists: Boolean

  """Filter by the object’s `personId` field."""
  personId: UUIDFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  avatarUrl: String
  createdAt: Datetime
  familyId: UUID
  id: UUID
  name: String
  personId: UUID
  updatedAt: Datetime
}

"""
A filter to be used against many `Authentication` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyAuthenticationFilter {
  """
  Every related `Authentication` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AuthenticationFilter

  """
  No related `Authentication` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AuthenticationFilter

  """
  Some related `Authentication` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AuthenticationFilter
}

"""
A filter to be used against many `ManagedPerson` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyManagedPersonFilter {
  """
  Every related `ManagedPerson` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ManagedPersonFilter

  """
  No related `ManagedPerson` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ManagedPersonFilter

  """
  Some related `ManagedPerson` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ManagedPersonFilter
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """A list of `User` objects."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  AVATAR_URL_ASC
  AVATAR_URL_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  FAMILY_ID_ASC
  FAMILY_ID_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PERSON_ID_ASC
  PERSON_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}
