// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: messages.sql

package api

import (
	"context"
)

const adminDeleteMessage = `-- name: AdminDeleteMessage :one
update messages
set body = '+++ deleted +++'
where id = $1
returning id, created_at, sender_id, room_id, body
`

func (q *Queries) AdminDeleteMessage(ctx context.Context, id int64) (Message, error) {
	row := q.db.QueryRow(ctx, adminDeleteMessage, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.SenderID,
		&i.RoomID,
		&i.Body,
	)
	return i, err
}

const adminRecentMessages = `-- name: AdminRecentMessages :many
select m.id, m.created_at, m.sender_id, m.room_id, m.body, sender.id, sender.created_at, sender.username, sender.email, sender.avatar_url_deprecated, sender.is_parent, sender.bio, sender.become_user_id, sender.admin, sender.gradient, sender.avatar
 from messages m
 join users sender on m.sender_id = sender.id
 order by m.created_at desc
 limit 128
`

type AdminRecentMessagesRow struct {
	Message Message
	User    User
}

func (q *Queries) AdminRecentMessages(ctx context.Context) ([]AdminRecentMessagesRow, error) {
	rows, err := q.db.Query(ctx, adminRecentMessages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AdminRecentMessagesRow
	for rows.Next() {
		var i AdminRecentMessagesRow
		if err := rows.Scan(
			&i.Message.ID,
			&i.Message.CreatedAt,
			&i.Message.SenderID,
			&i.Message.RoomID,
			&i.Message.Body,
			&i.User.ID,
			&i.User.CreatedAt,
			&i.User.Username,
			&i.User.Email,
			&i.User.AvatarUrlDeprecated,
			&i.User.IsParent,
			&i.User.Bio,
			&i.User.BecomeUserID,
			&i.User.Admin,
			&i.User.Gradient,
			&i.User.Avatar,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const messageByID = `-- name: MessageByID :one
select id, created_at, sender_id, room_id, body from messages where id = $1
`

func (q *Queries) MessageByID(ctx context.Context, id int64) (Message, error) {
	row := q.db.QueryRow(ctx, messageByID, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.SenderID,
		&i.RoomID,
		&i.Body,
	)
	return i, err
}

const recentRoomMessages = `-- name: RecentRoomMessages :many
select m.id, m.created_at, m.sender_id, m.room_id, m.body, sender.id, sender.created_at, sender.username, sender.email, sender.avatar_url_deprecated, sender.is_parent, sender.bio, sender.become_user_id, sender.admin, sender.gradient, sender.avatar
from messages m
join users sender on m.sender_id = sender.id
where m.room_id = $1
order by m.created_at desc
limit 128
`

type RecentRoomMessagesRow struct {
	Message Message
	User    User
}

func (q *Queries) RecentRoomMessages(ctx context.Context, roomID int64) ([]RecentRoomMessagesRow, error) {
	rows, err := q.db.Query(ctx, recentRoomMessages, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RecentRoomMessagesRow
	for rows.Next() {
		var i RecentRoomMessagesRow
		if err := rows.Scan(
			&i.Message.ID,
			&i.Message.CreatedAt,
			&i.Message.SenderID,
			&i.Message.RoomID,
			&i.Message.Body,
			&i.User.ID,
			&i.User.CreatedAt,
			&i.User.Username,
			&i.User.Email,
			&i.User.AvatarUrlDeprecated,
			&i.User.IsParent,
			&i.User.Bio,
			&i.User.BecomeUserID,
			&i.User.Admin,
			&i.User.Gradient,
			&i.User.Avatar,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
