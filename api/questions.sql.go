// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: questions.sql

package api

import (
	"context"
)

const attemptNextQuestion = `-- name: AttemptNextQuestion :one
select questions.id, questions.created_at, questions.quiz_id, questions.text, questions.answer from questions
left join responses on responses.question_id = questions.id
where
  questions.id not in (select question_id from responses where responses.attempt_id = $1)
and
  questions.quiz_id = $2
order by random()
`

type AttemptNextQuestionParams struct {
	AttemptID int64
	QuizID    int64
}

func (q *Queries) AttemptNextQuestion(ctx context.Context, arg AttemptNextQuestionParams) (Question, error) {
	row := q.db.QueryRow(ctx, attemptNextQuestion, arg.AttemptID, arg.QuizID)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.QuizID,
		&i.Text,
		&i.Answer,
	)
	return i, err
}

const createQuestion = `-- name: CreateQuestion :one
insert into questions(quiz_id, text, answer) values($1,$2,$3) returning id, created_at, quiz_id, text, answer
`

type CreateQuestionParams struct {
	QuizID int64
	Text   string
	Answer string
}

func (q *Queries) CreateQuestion(ctx context.Context, arg CreateQuestionParams) (Question, error) {
	row := q.db.QueryRow(ctx, createQuestion, arg.QuizID, arg.Text, arg.Answer)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.QuizID,
		&i.Text,
		&i.Answer,
	)
	return i, err
}

const question = `-- name: Question :one
select id, created_at, quiz_id, text, answer from questions where id = $1
`

func (q *Queries) Question(ctx context.Context, id int64) (Question, error) {
	row := q.db.QueryRow(ctx, question, id)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.QuizID,
		&i.Text,
		&i.Answer,
	)
	return i, err
}

const questionCount = `-- name: QuestionCount :one
select count(*) from questions where quiz_id = $1
`

func (q *Queries) QuestionCount(ctx context.Context, quizID int64) (int64, error) {
	row := q.db.QueryRow(ctx, questionCount, quizID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const quizQuestions = `-- name: QuizQuestions :many
select id, created_at, quiz_id, text, answer from questions where quiz_id = $1
`

func (q *Queries) QuizQuestions(ctx context.Context, quizID int64) ([]Question, error) {
	rows, err := q.db.Query(ctx, quizQuestions, quizID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Question
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.QuizID,
			&i.Text,
			&i.Answer,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateQuestion = `-- name: UpdateQuestion :one
update questions set text = $1, answer = $2 where id = $3 returning id, created_at, quiz_id, text, answer
`

type UpdateQuestionParams struct {
	Text   string
	Answer string
	ID     int64
}

func (q *Queries) UpdateQuestion(ctx context.Context, arg UpdateQuestionParams) (Question, error) {
	row := q.db.QueryRow(ctx, updateQuestion, arg.Text, arg.Answer, arg.ID)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.QuizID,
		&i.Text,
		&i.Answer,
	)
	return i, err
}
