// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: threads.sql

package api

import (
	"context"
)

const assistantThreads = `-- name: AssistantThreads :many
select id, created_at, thread_id, assistant_id, user_id from threads where assistant_id = $1 and user_id = $2
`

type AssistantThreadsParams struct {
	AssistantID string
	UserID      int64
}

func (q *Queries) AssistantThreads(ctx context.Context, arg AssistantThreadsParams) ([]Thread, error) {
	rows, err := q.db.Query(ctx, assistantThreads, arg.AssistantID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Thread
	for rows.Next() {
		var i Thread
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.ThreadID,
			&i.AssistantID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createThread = `-- name: CreateThread :one
insert into threads(user_id, thread_id, assistant_id) values($1,$2,$3) returning id, created_at, thread_id, assistant_id, user_id
`

type CreateThreadParams struct {
	UserID      int64
	ThreadID    string
	AssistantID string
}

func (q *Queries) CreateThread(ctx context.Context, arg CreateThreadParams) (Thread, error) {
	row := q.db.QueryRow(ctx, createThread, arg.UserID, arg.ThreadID, arg.AssistantID)
	var i Thread
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ThreadID,
		&i.AssistantID,
		&i.UserID,
	)
	return i, err
}

const userThreadByID = `-- name: UserThreadByID :one
select id, created_at, thread_id, assistant_id, user_id from threads where user_id = $1 and thread_id = $2
`

type UserThreadByIDParams struct {
	UserID   int64
	ThreadID string
}

func (q *Queries) UserThreadByID(ctx context.Context, arg UserThreadByIDParams) (Thread, error) {
	row := q.db.QueryRow(ctx, userThreadByID, arg.UserID, arg.ThreadID)
	var i Thread
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ThreadID,
		&i.AssistantID,
		&i.UserID,
	)
	return i, err
}
