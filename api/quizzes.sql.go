// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: quizzes.sql

package api

import (
	"context"
)

const allQuizzes = `-- name: AllQuizzes :many
select id, created_at, name, description, published, user_id, is_deleted from quizzes where not is_deleted order by created_at desc
`

func (q *Queries) AllQuizzes(ctx context.Context) ([]Quiz, error) {
	rows, err := q.db.Query(ctx, allQuizzes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Quiz
	for rows.Next() {
		var i Quiz
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Name,
			&i.Description,
			&i.Published,
			&i.UserID,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const allUserQuizzes = `-- name: AllUserQuizzes :many
select id, created_at, name, description, published, user_id, is_deleted from quizzes where not is_deleted and user_id = $1 order by published desc
`

func (q *Queries) AllUserQuizzes(ctx context.Context, userID int64) ([]Quiz, error) {
	rows, err := q.db.Query(ctx, allUserQuizzes, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Quiz
	for rows.Next() {
		var i Quiz
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Name,
			&i.Description,
			&i.Published,
			&i.UserID,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createQuiz = `-- name: CreateQuiz :one
insert into quizzes(name,description,user_id) values($1,$2,$3) returning id, created_at, name, description, published, user_id, is_deleted
`

type CreateQuizParams struct {
	Name        string
	Description string
	UserID      int64
}

func (q *Queries) CreateQuiz(ctx context.Context, arg CreateQuizParams) (Quiz, error) {
	row := q.db.QueryRow(ctx, createQuiz, arg.Name, arg.Description, arg.UserID)
	var i Quiz
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.Description,
		&i.Published,
		&i.UserID,
		&i.IsDeleted,
	)
	return i, err
}

const deleteQuiz = `-- name: DeleteQuiz :exec
update quizzes set is_deleted = true where id = $1 and user_id = $2
`

type DeleteQuizParams struct {
	QuizID int64
	UserID int64
}

func (q *Queries) DeleteQuiz(ctx context.Context, arg DeleteQuizParams) error {
	_, err := q.db.Exec(ctx, deleteQuiz, arg.QuizID, arg.UserID)
	return err
}

const publishedQuizzes = `-- name: PublishedQuizzes :many
select id, created_at, name, description, published, user_id, is_deleted from quizzes where not is_deleted and published order by created_at desc
`

func (q *Queries) PublishedQuizzes(ctx context.Context) ([]Quiz, error) {
	rows, err := q.db.Query(ctx, publishedQuizzes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Quiz
	for rows.Next() {
		var i Quiz
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Name,
			&i.Description,
			&i.Published,
			&i.UserID,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const publishedUserQuizzes = `-- name: PublishedUserQuizzes :many
select id, created_at, name, description, published, user_id, is_deleted from quizzes where not is_deleted and published and user_id = $1 order by created_at desc
`

func (q *Queries) PublishedUserQuizzes(ctx context.Context, userID int64) ([]Quiz, error) {
	rows, err := q.db.Query(ctx, publishedUserQuizzes, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Quiz
	for rows.Next() {
		var i Quiz
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Name,
			&i.Description,
			&i.Published,
			&i.UserID,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const quiz = `-- name: Quiz :one
select id, created_at, name, description, published, user_id, is_deleted from quizzes where not is_deleted and id = $1
`

func (q *Queries) Quiz(ctx context.Context, id int64) (Quiz, error) {
	row := q.db.QueryRow(ctx, quiz, id)
	var i Quiz
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.Description,
		&i.Published,
		&i.UserID,
		&i.IsDeleted,
	)
	return i, err
}

const setQuizPublished = `-- name: SetQuizPublished :one
update quizzes set published = $1 where not is_deleted and id = $2 returning id, created_at, name, description, published, user_id, is_deleted
`

type SetQuizPublishedParams struct {
	Published bool
	ID        int64
}

func (q *Queries) SetQuizPublished(ctx context.Context, arg SetQuizPublishedParams) (Quiz, error) {
	row := q.db.QueryRow(ctx, setQuizPublished, arg.Published, arg.ID)
	var i Quiz
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.Description,
		&i.Published,
		&i.UserID,
		&i.IsDeleted,
	)
	return i, err
}

const updateQuiz = `-- name: UpdateQuiz :one
update quizzes set name = $1, description = $2 where id = $3 returning id, created_at, name, description, published, user_id, is_deleted
`

type UpdateQuizParams struct {
	Name        string
	Description string
	ID          int64
}

func (q *Queries) UpdateQuiz(ctx context.Context, arg UpdateQuizParams) (Quiz, error) {
	row := q.db.QueryRow(ctx, updateQuiz, arg.Name, arg.Description, arg.ID)
	var i Quiz
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.Description,
		&i.Published,
		&i.UserID,
		&i.IsDeleted,
	)
	return i, err
}
