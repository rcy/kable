// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: chess_matches.sql

package api

import (
	"context"
)

const chessMatchByID = `-- name: ChessMatchByID :one
select id, created_at, updated_at, white_user_id, black_user_id, pgn from chess_matches where id = $1
`

func (q *Queries) ChessMatchByID(ctx context.Context, id int64) (ChessMatch, error) {
	row := q.db.QueryRow(ctx, chessMatchByID, id)
	var i ChessMatch
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WhiteUserID,
		&i.BlackUserID,
		&i.Pgn,
	)
	return i, err
}

const chessMatchesBetweenUsers = `-- name: ChessMatchesBetweenUsers :many
select id, created_at, updated_at, white_user_id, black_user_id, pgn from chess_matches
where
  (white_user_id = $1 and black_user_id = $2)
or
  (white_user_id = $2 and black_user_id = $1)
order by updated_at desc
`

type ChessMatchesBetweenUsersParams struct {
	User1ID int64
	User2ID int64
}

func (q *Queries) ChessMatchesBetweenUsers(ctx context.Context, arg ChessMatchesBetweenUsersParams) ([]ChessMatch, error) {
	rows, err := q.db.Query(ctx, chessMatchesBetweenUsers, arg.User1ID, arg.User2ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChessMatch
	for rows.Next() {
		var i ChessMatch
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.WhiteUserID,
			&i.BlackUserID,
			&i.Pgn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createChessMatch = `-- name: CreateChessMatch :one
insert into chess_matches(white_user_id, black_user_id, pgn)
values ($1, $2, $3)
returning id, created_at, updated_at, white_user_id, black_user_id, pgn
`

type CreateChessMatchParams struct {
	WhiteUserID int64
	BlackUserID int64
	Pgn         string
}

func (q *Queries) CreateChessMatch(ctx context.Context, arg CreateChessMatchParams) (ChessMatch, error) {
	row := q.db.QueryRow(ctx, createChessMatch, arg.WhiteUserID, arg.BlackUserID, arg.Pgn)
	var i ChessMatch
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WhiteUserID,
		&i.BlackUserID,
		&i.Pgn,
	)
	return i, err
}

const updateChessMatchPGN = `-- name: UpdateChessMatchPGN :one
update chess_matches set pgn = $1 where id = $2 returning id, created_at, updated_at, white_user_id, black_user_id, pgn
`

type UpdateChessMatchPGNParams struct {
	Pgn string
	ID  int64
}

func (q *Queries) UpdateChessMatchPGN(ctx context.Context, arg UpdateChessMatchPGNParams) (ChessMatch, error) {
	row := q.db.QueryRow(ctx, updateChessMatchPGN, arg.Pgn, arg.ID)
	var i ChessMatch
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WhiteUserID,
		&i.BlackUserID,
		&i.Pgn,
	)
	return i, err
}
