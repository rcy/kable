// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: bots.sql

package api

import (
	"context"
)

const allBots = `-- name: AllBots :many
select bots.id, bots.created_at, bots.owner_id, bots.assistant_id, bots.name, bots.description, bots.published, users.id, users.created_at, users.username, users.email, users.avatar_url_deprecated, users.is_parent, users.bio, users.become_user_id, users.admin, users.gradient, users.avatar from bots join users on bots.owner_id = users.id order by bots.created_at desc
`

type AllBotsRow struct {
	Bot  Bot
	User User
}

func (q *Queries) AllBots(ctx context.Context) ([]AllBotsRow, error) {
	rows, err := q.db.Query(ctx, allBots)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AllBotsRow
	for rows.Next() {
		var i AllBotsRow
		if err := rows.Scan(
			&i.Bot.ID,
			&i.Bot.CreatedAt,
			&i.Bot.OwnerID,
			&i.Bot.AssistantID,
			&i.Bot.Name,
			&i.Bot.Description,
			&i.Bot.Published,
			&i.User.ID,
			&i.User.CreatedAt,
			&i.User.Username,
			&i.User.Email,
			&i.User.AvatarUrlDeprecated,
			&i.User.IsParent,
			&i.User.Bio,
			&i.User.BecomeUserID,
			&i.User.Admin,
			&i.User.Gradient,
			&i.User.Avatar,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const bot = `-- name: Bot :one
select id, created_at, owner_id, assistant_id, name, description, published from bots where id = $1
`

func (q *Queries) Bot(ctx context.Context, id int64) (Bot, error) {
	row := q.db.QueryRow(ctx, bot, id)
	var i Bot
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.OwnerID,
		&i.AssistantID,
		&i.Name,
		&i.Description,
		&i.Published,
	)
	return i, err
}

const createBot = `-- name: CreateBot :one
insert into bots(owner_id, assistant_id, name, description) values($1,$2,$3,$4) returning id, created_at, owner_id, assistant_id, name, description, published
`

type CreateBotParams struct {
	OwnerID     int64
	AssistantID string
	Name        string
	Description string
}

func (q *Queries) CreateBot(ctx context.Context, arg CreateBotParams) (Bot, error) {
	row := q.db.QueryRow(ctx, createBot,
		arg.OwnerID,
		arg.AssistantID,
		arg.Name,
		arg.Description,
	)
	var i Bot
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.OwnerID,
		&i.AssistantID,
		&i.Name,
		&i.Description,
		&i.Published,
	)
	return i, err
}

const publishedBots = `-- name: PublishedBots :many
select id, created_at, owner_id, assistant_id, name, description, published from bots where published = 1
`

func (q *Queries) PublishedBots(ctx context.Context) ([]Bot, error) {
	rows, err := q.db.Query(ctx, publishedBots)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bot
	for rows.Next() {
		var i Bot
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.OwnerID,
			&i.AssistantID,
			&i.Name,
			&i.Description,
			&i.Published,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBotDescription = `-- name: UpdateBotDescription :one
update bots set description = $1, name = $2 where id = $3 and owner_id = $4 returning id, created_at, owner_id, assistant_id, name, description, published
`

type UpdateBotDescriptionParams struct {
	Description string
	Name        string
	ID          int64
	OwnerID     int64
}

func (q *Queries) UpdateBotDescription(ctx context.Context, arg UpdateBotDescriptionParams) (Bot, error) {
	row := q.db.QueryRow(ctx, updateBotDescription,
		arg.Description,
		arg.Name,
		arg.ID,
		arg.OwnerID,
	)
	var i Bot
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.OwnerID,
		&i.AssistantID,
		&i.Name,
		&i.Description,
		&i.Published,
	)
	return i, err
}

const userVisibleBots = `-- name: UserVisibleBots :many
select id, created_at, owner_id, assistant_id, name, description, published from bots where owner_id = $1 or published = 1
`

func (q *Queries) UserVisibleBots(ctx context.Context, ownerID int64) ([]Bot, error) {
	rows, err := q.db.Query(ctx, userVisibleBots, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bot
	for rows.Next() {
		var i Bot
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.OwnerID,
			&i.AssistantID,
			&i.Name,
			&i.Description,
			&i.Published,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
