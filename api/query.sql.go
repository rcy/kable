// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: query.sql

package api

import (
	"context"
	"time"
)

const recentMessages = `-- name: RecentMessages :many
select id, created_at, sender_id, room_id, body, sender_avatar_url from (
  select m.id, m.created_at, m.sender_id, m.room_id, m.body, sender.avatar_url as sender_avatar_url
   from messages m
   join users sender on m.sender_id = sender.id
   where m.room_id = ?
   order by m.created_at desc
   limit 128
  ) t
order by created_at asc
`

type RecentMessagesRow struct {
	ID              int64
	CreatedAt       time.Time
	SenderID        int64
	RoomID          string
	Body            string
	SenderAvatarURL interface{}
}

func (q *Queries) RecentMessages(ctx context.Context, roomID string) ([]RecentMessagesRow, error) {
	rows, err := q.db.QueryContext(ctx, recentMessages, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RecentMessagesRow
	for rows.Next() {
		var i RecentMessagesRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.SenderID,
			&i.RoomID,
			&i.Body,
			&i.SenderAvatarURL,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
