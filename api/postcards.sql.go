// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: postcards.sql

package api

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"oj/avatar"
)

const createPostcard = `-- name: CreatePostcard :one
insert into postcards(sender, recipient, subject, body, state) values($1,$2,$3,$4,$5) returning id, created_at, sender, recipient, subject, body, state
`

type CreatePostcardParams struct {
	Sender    int64
	Recipient int64
	Subject   string
	Body      string
	State     string
}

func (q *Queries) CreatePostcard(ctx context.Context, arg CreatePostcardParams) (Postcard, error) {
	row := q.db.QueryRow(ctx, createPostcard,
		arg.Sender,
		arg.Recipient,
		arg.Subject,
		arg.Body,
		arg.State,
	)
	var i Postcard
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Sender,
		&i.Recipient,
		&i.Subject,
		&i.Body,
		&i.State,
	)
	return i, err
}

const userPostcardsReceived = `-- name: UserPostcardsReceived :many
select p.id, p.created_at, p.sender, p.recipient, p.subject, p.body, p.state, s.username, s.avatar
from postcards p
join users s on p.sender = s.id
where recipient = $1
order by p.created_at desc
`

type UserPostcardsReceivedRow struct {
	ID        int64
	CreatedAt pgtype.Timestamptz
	Sender    int64
	Recipient int64
	Subject   string
	Body      string
	State     string
	Username  string
	Avatar    avatar.Avatar
}

func (q *Queries) UserPostcardsReceived(ctx context.Context, recipient int64) ([]UserPostcardsReceivedRow, error) {
	rows, err := q.db.Query(ctx, userPostcardsReceived, recipient)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserPostcardsReceivedRow
	for rows.Next() {
		var i UserPostcardsReceivedRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Sender,
			&i.Recipient,
			&i.Subject,
			&i.Body,
			&i.State,
			&i.Username,
			&i.Avatar,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userPostcardsSent = `-- name: UserPostcardsSent :many
select p.id, p.created_at, p.sender, p.recipient, p.subject, p.body, p.state, r.username, r.avatar
from postcards p
join users r on p.recipient = r.id
where sender = $1
order by p.created_at desc
`

type UserPostcardsSentRow struct {
	ID        int64
	CreatedAt pgtype.Timestamptz
	Sender    int64
	Recipient int64
	Subject   string
	Body      string
	State     string
	Username  string
	Avatar    avatar.Avatar
}

func (q *Queries) UserPostcardsSent(ctx context.Context, sender int64) ([]UserPostcardsSentRow, error) {
	rows, err := q.db.Query(ctx, userPostcardsSent, sender)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserPostcardsSentRow
	for rows.Next() {
		var i UserPostcardsSentRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Sender,
			&i.Recipient,
			&i.Subject,
			&i.Body,
			&i.State,
			&i.Username,
			&i.Avatar,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
