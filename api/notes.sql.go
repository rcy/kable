// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: notes.sql

package api

import (
	"context"
)

const createNote = `-- name: CreateNote :one
insert into notes(owner_id,body) values($1,$2) returning id, created_at, owner_id, body, published
`

type CreateNoteParams struct {
	OwnerID int64
	Body    string
}

func (q *Queries) CreateNote(ctx context.Context, arg CreateNoteParams) (Note, error) {
	row := q.db.QueryRow(ctx, createNote, arg.OwnerID, arg.Body)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.OwnerID,
		&i.Body,
		&i.Published,
	)
	return i, err
}

const deleteNote = `-- name: DeleteNote :exec
delete from notes where id = $1 and owner_id = $2
`

type DeleteNoteParams struct {
	ID      int64
	OwnerID int64
}

func (q *Queries) DeleteNote(ctx context.Context, arg DeleteNoteParams) error {
	_, err := q.db.Exec(ctx, deleteNote, arg.ID, arg.OwnerID)
	return err
}

const publishedNotes = `-- name: PublishedNotes :many
select id, created_at, owner_id, body, published from notes where published = 1
`

func (q *Queries) PublishedNotes(ctx context.Context) ([]Note, error) {
	rows, err := q.db.Query(ctx, publishedNotes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Note
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.OwnerID,
			&i.Body,
			&i.Published,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNote = `-- name: UpdateNote :one
update notes set body = $1 where id = $2 and owner_id = $3 returning id, created_at, owner_id, body, published
`

type UpdateNoteParams struct {
	Body    string
	ID      int64
	OwnerID int64
}

func (q *Queries) UpdateNote(ctx context.Context, arg UpdateNoteParams) (Note, error) {
	row := q.db.QueryRow(ctx, updateNote, arg.Body, arg.ID, arg.OwnerID)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.OwnerID,
		&i.Body,
		&i.Published,
	)
	return i, err
}

const userNotes = `-- name: UserNotes :many
select id, created_at, owner_id, body, published from notes where owner_id = $1 order by created_at desc
`

func (q *Queries) UserNotes(ctx context.Context, ownerID int64) ([]Note, error) {
	rows, err := q.db.Query(ctx, userNotes, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Note
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.OwnerID,
			&i.Body,
			&i.Published,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
